// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ars0915/matching-system/internal/tree (interfaces: Tree)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/ars0915/matching-system/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTree is a mock of Tree interface.
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree.
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance.
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTree) EXPECT() *MockTreeMockRecorder {
	return m.recorder
}

// AddPerson mocks base method.
func (m *MockTree) AddPerson(arg0 *entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPerson", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPerson indicates an expected call of AddPerson.
func (mr *MockTreeMockRecorder) AddPerson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPerson", reflect.TypeOf((*MockTree)(nil).AddPerson), arg0)
}

// FindByID mocks base method.
func (m *MockTree) FindByID(arg0 uint64) (*entity.Person, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*entity.Person)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTreeMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTree)(nil).FindByID), arg0)
}

// QueryByHeight mocks base method.
func (m *MockTree) QueryByHeight(arg0, arg1 float64) []entity.Person {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByHeight", arg0, arg1)
	ret0, _ := ret[0].([]entity.Person)
	return ret0
}

// QueryByHeight indicates an expected call of QueryByHeight.
func (mr *MockTreeMockRecorder) QueryByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByHeight", reflect.TypeOf((*MockTree)(nil).QueryByHeight), arg0, arg1)
}

// RemovePerson mocks base method.
func (m *MockTree) RemovePerson(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePerson", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePerson indicates an expected call of RemovePerson.
func (mr *MockTreeMockRecorder) RemovePerson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePerson", reflect.TypeOf((*MockTree)(nil).RemovePerson), arg0)
}
